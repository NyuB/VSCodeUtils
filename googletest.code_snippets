{
	"Test case": {
		"body": [
			"TEST(${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/g}}, Test_${2:${RANDOM}}) {",
			"\t${0}",
			"}",
		],
		"prefix": "gtst",
		"description": "Test (gtest style)",
	},
	"Test case with fixture": {
		"body": [
			"TEST(${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/g}}, Test_${2:${RANDOM}}) {",
			"${0}",
			"}",
		],
		"prefix": "gftst",
		"description": "Test with fixture (gtest style)",
	},
	// Assertions
	// assertThat ♥️
	"assertThat (surround with)": {
		"body": "ASSERT_THAT(${TM_SELECTED_TEXT}, ${1:testing::Eq}(${2:expected}));"
	},
	"assertThat": {
		"body": "ASSERT_THAT(${0:subject}, ${1:testing::Eq}(${2:expected}));",
		"prefix": "assertThat",
	},
	// Equality
	"assertEqual (surround with)": {
		"body": "ASSERT_EQ(${TM_SELECTED_TEXT}, ${1:expected});"
	},
	"assertEqual": {
		"body": "ASSERT_EQ(${0:actual}, ${1:expected});",
		"prefix": "assertEqual",
	},
	// true/false
	"assertTrue (surround with)": {
		"body": "ASSERT_TRUE(${TM_SELECTED_TEXT})"
	},
	"assertTrue": {
		"body": "ASSERT_TRUE(${0:subject})",
		"prefix": "assertTrue",
	},
	"assertFalse (surround with)": {
		"body": "ASSERT_FALSE(${TM_SELECTED_TEXT})"
	},
	"assertFalse": {
		"body": "ASSERT_FALSE(${0:subject})",
		"prefix": "assertFalse",
	},
	// Binary comparisons
	"assertCompare (surround with)": {
		"body": "ASSERT_${2|GT,LT,GE,LE|}(${TM_SELECTED_TEXT}, ${1:compared_with});"
	},
	"assertCompare": {
		"body": "ASSERT_${3|GT,LT,GE,LE|}(${1:subject}, ${2:compared_with});",
		"prefix": "assertCompare",
	},
	// Floating point number relaxed equality
	"assertFloatEqual (surround with)": {
		"body": "ASSERT_${2|DOUBLE,FLOAT|}_EQ(${TM_SELECTED_TEXT}, ${1:compared_with});"
	},
	"assertFloatEqual": {
		"body": "ASSERT_${3|DOUBLE,FLOAT|}_EQ(${1:subject}, ${2:compared_with});",
		"prefix": "assertFloatEqual"
	},
	// Compare numbers with tolerance
	"assertClose (surround with)": {
		"body": "ASSERT_NEAR(${TM_SELECTED_TEXT}, ${1:compared_with}, ${2:tolerance});"
	},
	"assertClose": {
		"body": "ASSERT_NEAR(${1:subject}, ${2:compared_with}, ${3:tolerance});",
		"prefix": "assertClose",
	},
	// Exceptions
	"assertThrow (surround with)": {
		"body": [
			"ASSERT_THROW({",
			"\t${TM_SELECTED_TEXT}",
			"}, ${1:Exception});",
		],
	},
	"assertThrow": {
		"body": [
			"ASSERT_THROW({",
			"\t$0",
			"}, ${2:Exception});",
		],
		"prefix": "assertThrow",
	},
}
