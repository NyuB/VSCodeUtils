{
	"Test case": {
		"scope": "cpp,hpp,h",
		"body": [
			"TEST(${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/g}}, ${2:Test_${RANDOM}}) {",
			"\t${0}",
			"}",
		],
		"prefix": "gtst",
		"description": "Test (gtest style)",
	},
	"Test case with fixture": {
		"scope": "cpp,hpp,h",
		"body": [
			"TEST(${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/g}}, ${2:Test_${RANDOM}}) {",
			"${0}",
			"}",
		],
		"prefix": "gftst",
		"description": "Test with fixture (gtest style)",
	},
	// Assertions
	// assertThat ♥️
	"assertThat": {
		"scope": "cpp,hpp,h",
		"body": "ASSERT_THAT(${1:${TM_SELECTED_TEXT:subject}}, ${2:testing::Eq}(${3:expected}));"
	},
	// Equality
	"assertEqual": {
		"scope": "cpp,hpp,h",
		"body": "ASSERT_EQ(${1:${TM_SELECTED_TEXT:actual}}, ${2:expected});"
	},
	"assertTrue": {
		"scope": "cpp,hpp,h",
		"body": "ASSERT_TRUE(${1:${TM_SELECTED_TEXT}});",
		"prefix": "assertTrue",
	},
	"assertFalse": {
		"scope": "cpp,hpp,h",
		"body": "ASSERT_FALSE(${1:${TM_SELECTED_TEXT}});",
		"prefix": "assertFalse",
	},
	// Binary comparisons
	"assertCompare": {
		"scope": "cpp,hpp,h",
		"body": "ASSERT_${3|GT,LT,GE,LE|}(${1:${TM_SELECTED_TEXT:subject}}, ${2:compared_with});",
		"prefix": "assertCompare",
	},
	// Floating point number relaxed equality
	"assertFloatEqual": {
		"scope": "cpp,hpp,h",
		"body": "ASSERT_${3|DOUBLE,FLOAT|}_EQ(${1:${TM_SELECTED_TEXT:subject}}, ${2:compared_with});",
		"prefix": "assertFloatEqual"
	},
	"assertClose": {
		"scope": "cpp,hpp,h",
		"body": "ASSERT_NEAR(${1:${TM_SELECTED_TEXT:subject}}, ${2:compared_with}, ${3:tolerance});",
		"prefix": "assertClose",
	},
	// Exceptions
	"assertThrow": {
		"scope": "cpp,hpp,h",
		"body": [
			"ASSERT_THROW({",
			"\t${0:${TM_SELECTED_TEXT}}",
			"}, ${1:Exception});",
		],
		"prefix": "assertThrow",
	},
}
